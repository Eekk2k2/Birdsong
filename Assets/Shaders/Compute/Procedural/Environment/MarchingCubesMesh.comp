#version 430 core

layout (local_size_x = 4, local_size_y = 2, local_size_z = 4) in;

layout (std430, binding = 0) buffer Field_IN {
	int field_in[4096][8];
};

layout (std430, binding = 1) buffer TriangulationTable_IN {
	int triangulationTable_in[256][16];
};

layout (std430, binding = 2) buffer Point_OUT {
	dvec4 point_out[245760];
};

layout (std430, binding = 3) buffer Normal_OUT {
	dvec4 normal_out[245760];
};

layout (std430, binding = 4) buffer Texcoord_OUT {
	dvec2 texcoord_out[245760];
};

void main() {
	float level = 0.5f;

	vec3 id = vec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z); 
    uint globalIndex = gl_LocalInvocationID.x + gl_WorkGroupSize.x * (gl_LocalInvocationID.y + gl_WorkGroupSize.y * (gl_LocalInvocationID.z + gl_WorkGroupSize.z * (gl_WorkGroupID.x + gl_NumWorkGroups.x * (gl_WorkGroupID.y + gl_NumWorkGroups.y * gl_WorkGroupID.z))));


	/*				Create data				*/

	vec4 currentCube[8] = {
		vec4(id.x,			id.y,			id.z,			field_in[globalIndex][0]),
		vec4(1.0f + id.x,	id.y,			id.z,			field_in[globalIndex][1]),
		vec4(1.0f + id.x,	id.y,			1.0f + id.z,	field_in[globalIndex][2]),
		vec4(id.x,			id.y,			1.0f + id.z,	field_in[globalIndex][3]),
		vec4(id.x,			1.0f + id.y,	id.z,			field_in[globalIndex][4]),
		vec4(1.0f + id.x,	1.0f + id.y,	id.z,			field_in[globalIndex][5]),
		vec4(1.0f + id.x,	1.0f + id.y,	1.0f + id.z,	field_in[globalIndex][6]),
		vec4(id.x,			1.0f + id.y,	1.0f + id.z,	field_in[globalIndex][7]),
	};

	// Function to replace the .w to its subsequent value
	// ...

	int triangulationIndex = 0;
	for	(int i = 0; i < 8; i++) {
		if (currentCube[i].w < level) {
			triangulationIndex |= 1 << i;
		}
	}

	int aVertexFromEdgeIndex[12] = { 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3 };
	int bVertexFromEdgeIndex[12] = { 1, 2, 3, 0, 5, 6, 7, 4, 4, 5, 6, 11 };

	for (int i = 0; triangulationTable_in[triangulationIndex][i] != -1; i+=3) {
		
		int aPoint0 = aVertexFromEdgeIndex[triangulationTable_in[triangulationIndex][i    ]];
		int bPoint0 = aVertexFromEdgeIndex[triangulationTable_in[triangulationIndex][i    ]];
		vec3 point0 = (vec3(currentCube[aPoint0]) + vec3(currentCube[bPoint0])) / 2.0f;

		int aPoint1 = aVertexFromEdgeIndex[triangulationTable_in[triangulationIndex][i + 1]];
		int bPoint1 = aVertexFromEdgeIndex[triangulationTable_in[triangulationIndex][i + 1]];
		vec3 point1 = (vec3(currentCube[aPoint1]) + vec3(currentCube[bPoint1])) / 2.0f;

		int aPoint2 = aVertexFromEdgeIndex[triangulationTable_in[triangulationIndex][i + 2]];
		int bPoint2 = aVertexFromEdgeIndex[triangulationTable_in[triangulationIndex][i + 2]];
		vec3 point2 = (vec3(currentCube[aPoint2]) + vec3(currentCube[bPoint2])) / 2.0f;

		vec3 a = point1 - point0;
		vec3 b = point2 - point0;
		vec3 normal = vec3(a.y * b.z - a.z * b.y, a.z * b.x - a.y * b.z, a.x * b.y - a.y * b.x); // normalize(cross(a, b));

		point_out		[globalIndex + i    ] = dvec4(1.0f, 1.0f, 1.0f, 0.0f);
		normal_out		[globalIndex + i    ] = dvec4(1.0f, 1.0f, 1.0f, 0.0f);
		texcoord_out	[globalIndex + i    ] = dvec2(1.0f, 1.0f);

		point_out		[globalIndex + i + 1] = dvec4(1.0f, 1.0f, 1.0f, 0.0f);
		normal_out		[globalIndex + i + 1] = dvec4(1.0f, 1.0f, 1.0f, 0.0f);
		texcoord_out	[globalIndex + i + 1] = dvec2(1.0f, 1.0f);

		point_out		[globalIndex + i + 2] = dvec4(1.0f, 1.0f, 1.0f, 0.0f);
		normal_out		[globalIndex + i + 2] = dvec4(1.0f, 1.0f, 1.0f, 0.0f);
		texcoord_out	[globalIndex + i + 2] = dvec2(1.0f, 1.0f);
	}
}